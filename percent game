// 해공예 확률게임 복붙 임시저장
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <time.h>
#include "hacking.h"

#define DATAFILE "/tmp/chance.data" // 사용자 데이터를 저장할 파일

// 사용자 정보를 저장할 user 구조체
struct user{
    int uid;
    int credits;
    int highscore;
    char name[100];
    int (*current_game)();
}

// 함수 프로토타입
int get_player_data();
void register_new_player();
void update_player_data();
void show_highscore();
void jackpot();
void input_name();
void print_cards(char *, char *, int);
int take_wager(int, int);
void play_the_game();
int pick_a_number();
int dealer_no_match();
int find_the_ace();
void fatal(char *);

// 전역 변수
struct user player; // 플레잉 ㅓ구조체

int main(){
    int choice, last_game;

    srand(time(0)); // 현재 시각으로 시드

    if(get_player_data() == -1){ // 플레이어 데이터 파일 읽기
        register_new_player(); // 파일에 데이터가 없으면 새로운 플레이어 등록
    }

    while(choice != -7){
        printf("-=[ 확률 게임 메뉴 ]=-\n");
        printf("1 - 숫자 뽑기 게임하기\n");
        printf("2 - No Match Dealer 게임하기\n");
        printf("3 - 에이스카드 찾기 게임하기\n");
        printf("4 - 현재 최고 점수 보기\n");
        printf("5 - 사용자 이름 변경\n");
        printf("6 - 100 크레딧으로 리셋하기\n");
        printf("7 - 종료\n");
        printf("[ 이름 : %s ]\n", player.name);
        printf("[ %u 크레딧이 있습니다 ] -> ", player.credits);
        scanf("%d", &choice);

        if((choice < 1) || (choice > 7)){
            printf("\n[!!] %d는 잘못된 선택입니다. 다시 선택해주세요.\n\n", choice);
        }
        else if(choice < 4){ // 아니면 게임이 선택된 것
            if(choice != last_game){ // 함수 포인터가 설정되어있지 않으면
                if(choice == 1){ // 선택한 게임을 가리키게 설정
                    player.current_game = pick_a_number;
                }
                else if(choice == 2){
                    player.current_game = dealer_no_match;
                }
                else{
                    player.current_game = find_the_ace;
                }
                last_game = choice; // last_game 설정
            }
            play_the_game(); // 게임하기
        }

        else if(choice == 4){
            show_highscore();
        }
        else if(choice == 5){
            printf("\n사용자 이름 변경\n");
            printf("새로운 이름 : ");
            input_name();
            printf("이름이 변경됐습니다.\n\n");
        }
        else if(chocie == 6){
            printf("\n100 크레딧이 됐습니다.\n\n");
            player.credits = 100;
        }
    }
    update_player_data();
    printf("\n게임해주셔서 감사합니다.! 그럼 안녕히.\n");
}

// 이 함수는 현재 uid의 플레이어 데이터를 파일에서 읽어온다.
// 현재 uid의 플레이어 데이터를 찾을 수 없으면 -1 리턴
int get_player_data(){
    int fd, uid, read_bytes;
    struct user entry;

    uid = getuid();

    fd = open(DATAFILE, O_RDONLY);
    
    if(fd == -1) return -1;

    read_bytes = read(fd, &entry, sizeof(struct user));

    while(entry.uid != uid && read_bytes > 0){ // read()함수는 실제 읽은 바이트 수를 리턴, 0이면 파일의 끝, -1이면 오류
        read_bytes = read(fd, &entry, sizeof(struct user));
    }
    close(fd);
    
    if(read_bytes < sizeof(struct user)){  // 파일을 끝까지 읽음.
        return -1;
    }
    else{
        player = entry; // 읽어온 값을 플레이어 구조체에 복사
    }
    return 1;
}

// 새 사용자 등록 함수
// 새로운 풀레이어 계정을 생성하고 파일 뒤에 추가
void register_new_player(){
    int fd;
    printf("-=-={ 새 플레이어 등록 }=-=-\n");
    printf("이름 : ");
    input_name();

    player.uid = getuid();
    player.highscore = player.credits = 100;

    fd = open(DATAFILE, O_WRONLY | O_CREAT | O_APPEND, S_IRUSR | S_IWUSR);
    if(fd == -1){
        fatal("register_new_player()에서 파일 열던 중");
    }
    write(fd, &player, sizeof(struct user));
    close(fd);

    printf("\n%s님 확률 게임에 온 것을 환영합니다.\n", player.name);
    printf("%u 크레딧이 있습니다.\n", player.credits);
}

// 현재 플레이어 데이터를 파일에 쓰는 함수
// 게임이 끝난 후 크레딧을 업데이트하는 데 주로 이용됨
void update_player_data(){
    int fd, i, real_uid;
    char burned_byte;

    fd = open(DATAFILE, O_RDWR); // 읽기 쓰기 모두 가능하게 열기
    if(fd == -1){
        fatal("update_player_data()에서 파일 열던 중");
    }
    read(fd, &read_uid, 4); // 첫 번째 구조체에서 uid 읽기
    while(read_uid != player.uid){ // 맞는 uid 찾을 때까지 반복
        for(i=0; i<sizeof(struct user) - 4; i++){ // 구조체 나머지 읽어서 fp 이동시키기
            read(fd, &burned_byte, 1);
        }
        read(fd, &read_uid, 4); // 다음 구조체에서 uid 읽기. 차라리 fp를 직접 이동시키는 함수를 사용하는건?
    }
    write(fd, &(player.credits), 4);
    write(fd, &(player.highscore), 4);
    write(fd, &(player.name), 100);
    close(fd);
}

// 현재 최고 점수와 최고득점자를 보여주는 함수
void show_highscore(){
    unsigned int top_score = 0;
    char top_name[100];
    struct user entry;
    int fd;

    printf("\n====================| 최고 점수 |====================\n");
    fd = open(DATAFILE, O_RDONLY);
    if(fd == -1){
        fatal("show_highscore()에서 파일 열던 중");
    }
    while(read(fd, &entry, sizeof(struct user)) > 0){
        if(entry.highscore > top_score){
            top_score = entry.highscore;
            strcpy(top_name, entry.name);
        }
    }
    close(fd);
    if(top_score > player.highscore){
        printf("%s이(가) 최고 점수 %u를 기록했습니다.\n", top_name, top_score);
    }
    else{
        printf("이제 당신이 %u로 최고 점수를 기록합니다!\n", player.highscore);
    }
    printf("=====================================================\n\n");
}

// 숫자 뽑기 게임의 잭팟 함수
void jackpot(){
    printf("*+*+*+*+*+* 잭팟 *+*+*+*+*+*\n");
    printf("100 크레딧의 잭팟에 당첨됐습니다!\n");
    player.credits += 100;
}

// 플레이어 이름을 입력하는데 사용하는 함수
// scanf("%s", &whatever)는 공백이 있으면 동작하지 않으므로 이 함수가 필요함
void input_name(){
    char *name_ptr, input_char='\n';

    while(input_char == '\n'){ // 남아있는 것들 지워버림
        scanf("%c", &input_char);
    }
    
    name_ptr = (char *)&(player.name); // name_ptr 은 player.name의 시작주소
    while(input_char != '\n'){
        *name_ptr = input_char;
        scanf("%c", &input_char);
        name_ptr++;
    }
    *name_ptr = 0; // 문자열 끝냄
}

// 에이스카드 찾기 게임용 세 장의 카드 출력 함수
// 출력할 메시지와 카드 배열 포인터와 사용자가 선택한 카드를 입력 인자로 받느낟.
// user_pick이 -1이면 카드 선택 번호를 보여준다.
void print_cards(char *message, char *cards, int user_pick){
    int i;

    printf("\n\t*** %s ***\n", message);
    printf("    \t._.\t._.\t._.\n");
    printf("카드 : \t|%c|\t|%c|\t|%c|\n\t", cards[0], cards[1], cards[2]);
    if(user_pick == -1){
        printf(" 1 \t 2 \t 3\n");
    }
    else{
        for(i=0; i<user_pick; i++){
            printf("\t");
        }
        printf(" ^-- 당신의 선택\n");
    }
}

// No Match Dealer 게임과 에이스카드 찾기 게임을 위한 베팅하는 함수
// 가능한 크레딧과 이전 베팅을 인자로 받는다.
// 이전 베팅 previous_wager는 에이스카드 찾기 게임에서 두 번째 베팅에서 아주 중요하다.
// 베팅액이 너무 크거나 너무 작으면 -1 리턴
// 아니면 베팅액을 리턴
int take_wager(int available_credits, int previous_wager){
    int wager, total_wager;

    printf("%d 크레딧 중 얼마나 거시겠습니까? ", available_credits);
    scanf("%d", &wager);
    if(wager < 1){ 
        printf("양수 값으로 베팅해야 합니다!\n");
        return -1;
    }
    total_wager = previous_wager + wager;
    if(total_wager > available_credits){ // 가능한 크레딧 확인
        printf("Your total wager of %d is more than you have!\n", total_wager);
        printf("You only have %d available credits, try again.\n", available_credits);
        return -1;
    }
    return wager;
}

// 현재 게임을 다시 하게 허용하는 루프가 있다.
// 각 게임 후에 새 크레딧 총합을 파일에 쓴다.
void play_the_game(){
    int play_again = 1;
    int (*game) ();
    char selection;

    while(play_again){
        printf("\n[DEBUG] current_game 포인터 @0x%08x\n", player.current_game);
        if(player.current_game() != -1){ // 오류없이 게임이 진행되고
            if(player.credits > player.highscore){ // 새 최고 점수가 기록되면
                player.highscore = player.credits; // 최고 점수 업데이트
            }
            printf("\n이제 %u 크레딧이 있습니다.\n", player.credits);
            update_player_data(); // 새 크레딧 총합을 파일에 씀
            printf("다시 하시겠습니까? (y/n)  ");
            selection = '\n';
            while(selection == '\n'){
                scanf("%c", &selection);
            }
            if(selection == 'n') play_again = 0;
        }
        else{ // 오류 발생 시 메인으로
            play_again = 0;
        }
    }
}
